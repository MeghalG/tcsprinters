{"_ts": 1761543521.1588, "data": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <link href=\"http://arxiv.org/api/query?search_query%3DConstant%20query%20local%20decoding%20against%20deletions%20is%20impossible%26id_list%3D%26start%3D0%26max_results%3D25\" rel=\"self\" type=\"application/atom+xml\"/>\n  <title type=\"html\">ArXiv Query: search_query=Constant query local decoding against deletions is impossible&amp;id_list=&amp;start=0&amp;max_results=25</title>\n  <id>http://arxiv.org/api/4M5UP6eQIqVtFZ8HKyjDQrHDexU</id>\n  <updated>2025-10-27T00:00:00-04:00</updated>\n  <opensearch:totalResults xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">2295164</opensearch:totalResults>\n  <opensearch:startIndex xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">0</opensearch:startIndex>\n  <opensearch:itemsPerPage xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">25</opensearch:itemsPerPage>\n  <entry>\n    <id>http://arxiv.org/abs/2311.08399v1</id>\n    <updated>2023-11-14T18:57:48Z</updated>\n    <published>2023-11-14T18:57:48Z</published>\n    <title>Constant Query Local Decoding Against Deletions Is Impossible</title>\n    <summary>  Locally decodable codes (LDC's) are error-correcting codes that allow\nrecovery of individual message indices by accessing only a constant number of\ncodeword indices. For substitution errors, it is evident that LDC's exist --\nHadamard codes are examples of $2$-query LDC's. Research on this front has\nfocused on finding the optimal encoding length for LDC's, for which there is a\nnearly exponential gap between the best lower bounds and constructions.\n  Ostrovsky and Paskin-Cherniavsky (ICITS 2015) introduced the notion of local\ndecoding to the insertion and deletion setting. In this context, it is not\nclear whether constant query LDC's exist at all. Indeed, in contrast to the\nclassical setting, Block et al. conjecture that they do not exist. Blocki et\nal. (FOCS 2021) make progress towards this conjecture, proving that any\npotential code must have at least exponential encoding length.\n  Our work definitively resolves the conjecture and shows that constant query\nLDC's do not exist in the insertion/deletion (or even deletion-only) setting.\nUsing a reduction shown by Blocki et al., this also implies that constant query\nlocally correctable codes do not exist in this setting.\n</summary>\n    <author>\n      <name>Meghal Gupta</name>\n    </author>\n    <link href=\"http://arxiv.org/abs/2311.08399v1\" rel=\"alternate\" type=\"text/html\"/>\n    <link title=\"pdf\" href=\"http://arxiv.org/pdf/2311.08399v1\" rel=\"related\" type=\"application/pdf\"/>\n    <arxiv:primary_category xmlns:arxiv=\"http://arxiv.org/schemas/atom\" term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.DS\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"math.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n  </entry>\n  <entry>\n    <id>http://arxiv.org/abs/2507.03141v1</id>\n    <updated>2025-07-03T19:42:21Z</updated>\n    <published>2025-07-03T19:42:21Z</published>\n    <title>Amortized Locally Decodable Codes for Insertions and Deletions</title>\n    <summary>  Locally Decodable Codes (LDCs) are error correcting codes which permit the\nrecovery of any single message symbol with a low number of queries to the\ncodeword (the locality). Traditional LDC tradeoffs between the rate, locality,\nand error tolerance are undesirable even in relaxed settings where the\nencoder/decoder share randomness or where the channel is resource-bounded.\nRecent work by Blocki and Zhang initiated the study of Hamming amortized\nLocally Decodable Codes (aLDCs), which allow the local decoder to amortize\ntheir number of queries over the recovery of a small subset of message symbols.\nSurprisingly, Blocki and Zhang construct asymptotically ideal (constant rate,\nconstant amortized locality, and constant error tolerance) Hamming aLDCs in\nprivate-key and resource-bounded settings. While this result overcame previous\nbarriers and impossibility results for Hamming LDCs, it is not clear whether\nthe techniques extend to Insdel LDCs. Constructing Insdel LDCs which are\nresilient to insertion and/or deletion errors is known to be even more\nchallenging.\n  Our first contribution is to provide a Hamming-to-Insdel compiler which\ntransforms any amortized Hamming LDC that satisfies a particular property to\namortized Insdel LDC while asymptotically preserving the rate, error tolerance\nand amortized locality. Prior Hamming-to-Insdel compilers worked for arbitrary\nHamming LDCs, but incurred an undesirable polylogarithmic blow-up in the\nlocality. Our second contribution is a construction of an ideal amortized\nHamming LDC which satisfies our special property in the relaxed settings where\nthe sender/receiver share randomness or where the channel is resource bounded.\nTaken together, we obtain ideal Insdel aLDCs in private-key and\nresource-bounded settings with constant amortized locality, constant rate and\nconstant error tolerance.\n</summary>\n    <author>\n      <name>Jeremiah Blocki</name>\n    </author>\n    <author>\n      <name>Justin Zhang</name>\n    </author>\n    <link href=\"http://arxiv.org/abs/2507.03141v1\" rel=\"alternate\" type=\"text/html\"/>\n    <link title=\"pdf\" href=\"http://arxiv.org/pdf/2507.03141v1\" rel=\"related\" type=\"application/pdf\"/>\n    <arxiv:primary_category xmlns:arxiv=\"http://arxiv.org/schemas/atom\" term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"math.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"68P30\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"E.4\" scheme=\"http://arxiv.org/schemas/atom\"/>\n  </entry>\n  <entry>\n    <id>http://arxiv.org/abs/2502.10538v2</id>\n    <updated>2025-06-16T21:16:32Z</updated>\n    <published>2025-02-14T20:10:14Z</published>\n    <title>Amortized Locally Decodable Codes</title>\n    <summary>  Locally Decodable Codes (LDCs) are error correcting codes that admit\nefficient decoding of individual message symbols without decoding the entire\nmessage. Unfortunately, known LDC constructions offer a sub-optimal trade-off\nbetween rate, error tolerance and locality, the number of queries that the\ndecoder must make to the received codeword $\\tilde {y}$ to recovered a\nparticular symbol from the original message $x$, even in relaxed settings where\nthe encoder/decoder share randomness or where the channel is resource bounded.\nWe initiate the study of Amortized Locally Decodable Codes where the local\ndecoder wants to recover multiple symbols of the original message $x$ and the\ntotal number of queries to the received codeword $y$ can be amortized by the\ntotal number of message symbols recovered. We demonstrate that amortization\nallows us to overcome prior barriers and impossibility results. We first\ndemonstrate that the Hadamard code achieves amortized locality below $2$ -- a\nresult that is known to be impossible without amortization. Second, we study\namortized locally decodable codes in cryptographic settings where the sender\nand receiver share a secret key or where the channel is resource-bounded and\nwhere the decoder wants to recover a consecutive subset of message symbols\n$[L,R]$. In these settings we show that it is possible to achieve a trifecta:\nconstant rate, error tolerance and constant amortized locality.\n</summary>\n    <author>\n      <name>Jeremiah Blocki</name>\n    </author>\n    <author>\n      <name>Justin Zhang</name>\n    </author>\n    <link href=\"http://arxiv.org/abs/2502.10538v2\" rel=\"alternate\" type=\"text/html\"/>\n    <link title=\"pdf\" href=\"http://arxiv.org/pdf/2502.10538v2\" rel=\"related\" type=\"application/pdf\"/>\n    <arxiv:primary_category xmlns:arxiv=\"http://arxiv.org/schemas/atom\" term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.CR\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"math.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"H.1.1; E.4\" scheme=\"http://arxiv.org/schemas/atom\"/>\n  </entry>\n  <entry>\n    <id>http://arxiv.org/abs/1702.06370v1</id>\n    <updated>2017-02-21T13:15:27Z</updated>\n    <published>2017-02-21T13:15:27Z</published>\n    <title>Answering Conjunctive Queries under Updates</title>\n    <summary>  We consider the task of enumerating and counting answers to $k$-ary\nconjunctive queries against relational databases that may be updated by\ninserting or deleting tuples. We exhibit a new notion of q-hierarchical\nconjunctive queries and show that these can be maintained efficiently in the\nfollowing sense. During a linear time preprocessing phase, we can build a data\nstructure that enables constant delay enumeration of the query results; and\nwhen the database is updated, we can update the data structure and restart the\nenumeration phase within constant time. For the special case of self-join free\nconjunctive queries we obtain a dichotomy: if a query is not q-hierarchical,\nthen query enumeration with sublinear$^\\ast$ delay and sublinear update time\n(and arbitrary preprocessing time) is impossible.\n  For answering Boolean conjunctive queries and for the more general problem of\ncounting the number of solutions of k-ary queries we obtain complete\ndichotomies: if the query's homomorphic core is q-hierarchical, then size of\nthe the query result can be computed in linear time and maintained with\nconstant update time. Otherwise, the size of the query result cannot be\nmaintained with sublinear update time. All our lower bounds rely on the\nOMv-conjecture, a conjecture on the hardness of online matrix-vector\nmultiplication that has recently emerged in the field of fine-grained\ncomplexity to characterise the hardness of dynamic problems. The lower bound\nfor the counting problem additionally relies on the orthogonal vectors\nconjecture, which in turn is implied by the strong exponential time hypothesis.\n  $^\\ast)$ By sublinear we mean $O(n^{1-\\varepsilon})$ for some\n$\\varepsilon&gt;0$, where $n$ is the size of the active domain of the current\ndatabase.\n</summary>\n    <author>\n      <name>Christoph Berkholz</name>\n    </author>\n    <author>\n      <name>Jens Keppeler</name>\n    </author>\n    <author>\n      <name>Nicole Schweikardt</name>\n    </author>\n    <link href=\"http://arxiv.org/abs/1702.06370v1\" rel=\"alternate\" type=\"text/html\"/>\n    <link title=\"pdf\" href=\"http://arxiv.org/pdf/1702.06370v1\" rel=\"related\" type=\"application/pdf\"/>\n    <arxiv:primary_category xmlns:arxiv=\"http://arxiv.org/schemas/atom\" term=\"cs.DB\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.DB\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.DS\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.LO\" scheme=\"http://arxiv.org/schemas/atom\"/>\n  </entry>\n  <entry>\n    <id>http://arxiv.org/abs/2010.11989v3</id>\n    <updated>2020-12-07T00:19:25Z</updated>\n    <published>2020-10-22T19:07:36Z</published>\n    <title>Locally Decodable/Correctable Codes for Insertions and Deletions</title>\n    <summary>  Recent efforts in coding theory have focused on building codes for insertions\nand deletions, called insdel codes, with optimal trade-offs between their\nredundancy and their error-correction capabilities, as well as efficient\nencoding and decoding algorithms.\n  In many applications, polynomial running time may still be prohibitively\nexpensive, which has motivated the study of codes with super-efficient decoding\nalgorithms. These have led to the well-studied notions of Locally Decodable\nCodes (LDCs) and Locally Correctable Codes (LCCs). Inspired by these notions,\nOstrovsky and Paskin-Cherniavsky (Information Theoretic Security, 2015)\ngeneralized Hamming LDCs to insertions and deletions. To the best of our\nknowledge, these are the only known results that study the analogues of Hamming\nLDCs in channels performing insertions and deletions.\n  Here we continue the study of insdel codes that admit local algorithms.\nSpecifically, we reprove the results of Ostrovsky and Paskin-Cherniavsky for\ninsdel LDCs using a different set of techniques. We also observe that the\ntechniques extend to constructions of LCCs. Specifically, we obtain insdel LDCs\nand LCCs from their Hamming LDCs and LCCs analogues, respectively. The rate and\nerror-correction capability blow up only by a constant factor, while the query\ncomplexity blows up by a poly log factor in the block length.\n  Since insdel locally decodable/correctble codes are scarcely studied in the\nliterature, we believe our results and techniques may lead to further research.\nIn particular, we conjecture that constant-query insdel LDCs/LCCs do not exist.\n</summary>\n    <author>\n      <name>Alexander R. Block</name>\n      <arxiv:affiliation xmlns:arxiv=\"http://arxiv.org/schemas/atom\">Purdue University</arxiv:affiliation>\n    </author>\n    <author>\n      <name>Jeremiah Blocki</name>\n      <arxiv:affiliation xmlns:arxiv=\"http://arxiv.org/schemas/atom\">Purdue University</arxiv:affiliation>\n    </author>\n    <author>\n      <name>Elena Grigorescu</name>\n      <arxiv:affiliation xmlns:arxiv=\"http://arxiv.org/schemas/atom\">Purdue University</arxiv:affiliation>\n    </author>\n    <author>\n      <name>Shubhang Kulkarni</name>\n      <arxiv:affiliation xmlns:arxiv=\"http://arxiv.org/schemas/atom\">University of Illinois Urbana-Champaign</arxiv:affiliation>\n    </author>\n    <author>\n      <name>Minshen Zhu</name>\n      <arxiv:affiliation xmlns:arxiv=\"http://arxiv.org/schemas/atom\">Purdue University</arxiv:affiliation>\n    </author>\n    <arxiv:doi xmlns:arxiv=\"http://arxiv.org/schemas/atom\">10.4230/LIPIcs.FSTTCS.2020.16</arxiv:doi>\n    <link title=\"doi\" href=\"http://dx.doi.org/10.4230/LIPIcs.FSTTCS.2020.16\" rel=\"related\"/>\n    <link href=\"http://arxiv.org/abs/2010.11989v3\" rel=\"alternate\" type=\"text/html\"/>\n    <link title=\"pdf\" href=\"http://arxiv.org/pdf/2010.11989v3\" rel=\"related\" type=\"application/pdf\"/>\n    <arxiv:primary_category xmlns:arxiv=\"http://arxiv.org/schemas/atom\" term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"math.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n  </entry>\n</feed>\n"}