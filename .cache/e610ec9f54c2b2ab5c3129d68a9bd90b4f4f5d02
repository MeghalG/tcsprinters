{"_ts": 1761552516.19616, "data": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <link href=\"http://arxiv.org/api/query?search_query%3Dti%3A%22Efficient%20interactive%20coding%20achieving%20optimal%20error%20resilience%20over%20the%20binary%20channel%22%26id_list%3D%26start%3D0%26max_results%3D15\" rel=\"self\" type=\"application/atom+xml\"/>\n  <title type=\"html\">ArXiv Query: search_query=ti:\"Efficient interactive coding achieving optimal error resilience over the binary channel\"&amp;id_list=&amp;start=0&amp;max_results=15</title>\n  <id>http://arxiv.org/api//l4SAm1TAnHd8kajbYmDcqHMBK8</id>\n  <updated>2025-10-27T00:00:00-04:00</updated>\n  <opensearch:totalResults xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">1</opensearch:totalResults>\n  <opensearch:startIndex xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">0</opensearch:startIndex>\n  <opensearch:itemsPerPage xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">15</opensearch:itemsPerPage>\n  <entry>\n    <id>http://arxiv.org/abs/2207.01144v1</id>\n    <updated>2022-07-03T23:37:57Z</updated>\n    <published>2022-07-03T23:37:57Z</published>\n    <title>Efficient Interactive Coding Achieving Optimal Error Resilience Over the\n  Binary Channel</title>\n    <summary>  Given a noiseless protocol $\\pi_0$ computing a function $f(x, y)$ of Alice\nand Bob's private inputs $x, y$, the goal of interactive coding is to construct\nan error-resilient protocol $\\pi$ computing $f$ such that even if some fraction\nof the communication is adversarially corrupted, both parties still learn $f(x,\ny)$. Ideally, the resulting scheme $\\pi$ should be positive rate,\ncomputationally efficient, and achieve optimal error resilience.\n  While interactive coding over large alphabets is well understood, the\nsituation over the binary alphabet has remained evasive. At the present moment,\nthe known schemes over the binary alphabet that achieve a higher error\nresilience than a trivial adaptation of large alphabet schemes are either still\nsuboptimally error resilient [EKS20], or optimally error resilient with\nexponential communication complexity [GZ22]. In this work, we construct a\nscheme achieving optimality in all three parameters: our protocol is positive\nrate, computationally efficient, and resilient to the optimal $\\frac16 -\n\\epsilon$ adversarial errors.\n  Our protocol employs a new type of code that we call a layered code, which\nmay be of independent interest. Like a tree code, a layered code allows the\ncoder to encode a message in an online fashion, but is defined on a graph\ninstead of a tree.\n</summary>\n    <author>\n      <name>Meghal Gupta</name>\n    </author>\n    <author>\n      <name>Rachel Yun Zhang</name>\n    </author>\n    <link href=\"http://arxiv.org/abs/2207.01144v1\" rel=\"alternate\" type=\"text/html\"/>\n    <link title=\"pdf\" href=\"http://arxiv.org/pdf/2207.01144v1\" rel=\"related\" type=\"application/pdf\"/>\n    <arxiv:primary_category xmlns:arxiv=\"http://arxiv.org/schemas/atom\" term=\"cs.DS\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.DS\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"cs.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n    <category term=\"math.IT\" scheme=\"http://arxiv.org/schemas/atom\"/>\n  </entry>\n</feed>\n"}